package com.example.hatd.ui.user.DanhGiaDriverScreen

// üß© C√°c import c·∫ßn thi·∫øt cho Compose UI
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.hatd.R
import androidx.compose.foundation.layout.ExperimentalLayoutApi
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.graphics.PathEffect
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.geometry.CornerRadius

// üîπ Cho ph√©p d√πng FlowRow (v·∫´n l√† experimental API)
@OptIn(ExperimentalLayoutApi::class)
@Composable
fun DanhGiaDriverScreen(onClose: () -> Unit = {}) {

    // State qu·∫£n l√Ω s·ªë sao ng∆∞·ªùi d√πng ch·ªçn
    var rating by remember { mutableStateOf(0) }

    // Danh s√°ch c√°c l·ªùi khen
    val compliments = listOf(
        "Th√¢n thi·ªán", "C·∫©n th·∫≠n", "ƒê√∫ng gi·ªù",
        "Th√°i ƒë·ªô t·ªët", "S·∫°ch s·∫Ω", "ƒê·ªìng ph·ª•c g·ªçn g√†ng"
    )

    // ‚úÖ State qu·∫£n l√Ω c√°c l·ªùi khen ƒë√£ ƒë∆∞·ª£c ch·ªçn
    var selectedCompliments by remember { mutableStateOf(setOf<String>()) }

    // üîπ To√†n b·ªô giao di·ªán ƒë∆∞·ª£c ƒë·∫∑t trong Column ch√≠nh
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF5FAFE)) // n·ªÅn xanh nh·∫°t t·ªïng th·ªÉ
            .padding(16.dp)
    ) {

        // Thanh ti√™u ƒë·ªÅ c√≥ n√∫t ‚ÄúX‚Äù ƒë√≥ng
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            contentAlignment = Alignment.Center
        ) {
            // N√∫t "X" ·ªü g√≥c tr√°i
            Text(
                text = "X",
                color = Color.Gray,
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                modifier = Modifier
                    .align(Alignment.CenterStart)
                    .clickable { onClose() } // khi b·∫•m g·ªçi h√†m ƒë√≥ng
                    .padding(start = 8.dp)
            )

            // Ti√™u ƒë·ªÅ cƒÉn gi·ªØa
            Text(
                text = "ƒê√°nh gi√° t√†i x·∫ø",
                fontWeight = FontWeight.Bold,
                fontSize = 22.sp,
                color = Color(0xFF000000),
                modifier = Modifier.align(Alignment.Center)
            )
        }

        //  Th√¥ng tin t√†i x·∫ø
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .height(160.dp)
                .padding(8.dp),
            colors = CardDefaults.cardColors(containerColor = Color.Transparent),
            shape = RoundedCornerShape(24.dp),
            border = BorderStroke(1.dp, Color(0xFF0081F1)) // vi·ªÅn xanh d∆∞∆°ng
        ) {
            Box(modifier = Modifier.fillMaxSize()) {

                // ·∫¢nh n·ªÅn trong card t√†i x·∫ø
                Image(
                    painter = painterResource(id = R.drawable.nenthongtindriver),
                    contentDescription = "Background Driver",
                    modifier = Modifier.fillMaxSize(),
                    contentScale = ContentScale.Crop
                )

                // Avatar, xe m√°y v√† t√™n t√†i x·∫ø
                Row(
                    modifier = Modifier
                        .align(Alignment.CenterStart)
                        .padding(start = 12.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Box {
                            // Avatar t√†i x·∫ø
                            Image(
                                painter = painterResource(id = R.drawable.avtdriver),
                                contentDescription = "·∫¢nh t√†i x·∫ø",
                                modifier = Modifier
                                    .size(80.dp)
                                    .offset(x = (-8).dp)
                                    .background(Color.White, CircleShape)
                                    .border(2.dp, Color(0xFF0081F1), CircleShape)
                            )

                            // ·∫¢nh xe m√°y
                            Image(
                                painter = painterResource(id = R.drawable.xemay),
                                contentDescription = "Xe m√°y",
                                modifier = Modifier
                                    .size(50.dp)
                                    .align(Alignment.BottomEnd)
                                    .offset(x = 6.dp, y = 6.dp)
                            )
                        }

                        Spacer(modifier = Modifier.height(8.dp))

                        // T√™n t√†i x·∫ø v√† ƒë√°nh gi√° sao
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier.padding(start = 8.dp)
                        ) {
                            Text(
                                text = "H·ª©a Anh T·ªõi ƒê√≥n",
                                fontWeight = FontWeight.SemiBold,
                                fontSize = 14.sp,
                                color = Color(0xFF333333)
                            )
                            Spacer(modifier = Modifier.width(6.dp))
                            Text(
                                text = "5.0‚≠ê",
                                color = Color.Black,
                                fontWeight = FontWeight.Medium,
                                fontSize = 14.sp
                            )
                        }
                    }
                }

                // Bi·ªÉn s·ªë xe + t√™n xe
                Column(
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(top = 16.dp, end = 16.dp),
                    horizontalAlignment = Alignment.End
                ) {
                    Surface(
                        shape = RoundedCornerShape(12.dp),
                        border = BorderStroke(1.dp, Color(0xFF0081F1)),
                        color = Color(0xFFE3F2FD),
                        modifier = Modifier.padding(4.dp)
                    ) {
                        Text(
                            text = "59TA-113.15",
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp,
                            color = Color(0xFF0081F1),
                            modifier = Modifier.padding(horizontal = 8.dp, vertical = 4.dp)
                        )
                    }

                    Text(
                        text = "EVO.HATD CYAN",
                        fontSize = 12.sp,
                        color = Color(0xFF007ACC)
                    )
                }

                // Logo g√≥c d∆∞·ªõi ph·∫£i
                Image(
                    painter = painterResource(id = R.drawable.logo),
                    contentDescription = "Logo HATD",
                    modifier = Modifier
                        .size(120.dp)
                        .align(Alignment.BottomEnd)
                        .offset(x = 10.dp, y = 30.dp)
                        .padding(bottom = 8.dp, end = 16.dp)
                )
            }
        }

        // Khung ƒë√°nh gi√° t·ªïng th·ªÉ
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {

                //KHUNG N√âT ƒê·ª®T bao quanh 3 ph·∫ßn: th√¥ng ƒëi·ªáp, sao v√† l·ªùi khen
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(0.dp)
                        .drawBehind {
                            val stroke = Stroke(
                                width = 6f, // ƒë·ªô d√†y n√©t
                                pathEffect = PathEffect.dashPathEffect(floatArrayOf(28f, 14f)) // n√©t ƒë·ª©t
                            )
                            drawRoundRect(
                                color = Color.Black, // m√†u ƒëen
                                style = stroke,
                                cornerRadius = CornerRadius(48f, 48f) // bo g√≥c m·ªÅm
                            )
                        }
                        .padding(15.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {

                    // H·ªôp th√¥ng ƒëi·ªáp g·ª£i √Ω
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(containerColor = Color(0xFFEEEEEE)),
                        shape = RoundedCornerShape(12.dp),
                        border = BorderStroke(1.dp, Color(0xFF0081F1)) // vi·ªÅn xanh
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "HATD lu√¥n l·∫Øng nghe ƒëi·ªÅu b·∫°n n√≥i.",
                                fontWeight = FontWeight.Bold,
                                fontSize = 16.sp,
                                textAlign = TextAlign.Center
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "C√≥ ƒëi·ªÅu g√¨ b·∫°n mu·ªën nh·∫Øn g·ª≠i ƒë·∫øn HATD kh√¥ng?\n" +
                                        "Chia s·∫ª ngay c·∫£m nghƒ© c·ªßa b·∫°n gi√∫p ch√∫ng t√¥i mang ƒë·∫øn\n" +
                                        "nh·ªØng chuy·∫øn ƒëi ng√†y c√†ng tuy·ªát h∆°n.",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // H√ÄNG SAO ƒê√ÅNH GI√Å
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .border(1.dp, Color(0xFF2196F3), RoundedCornerShape(12.dp)) // vi·ªÅn xanh d∆∞∆°ng ƒë·∫≠m
                            .padding(vertical = 12.dp)
                    ) {
                        Row(
                            horizontalArrangement = Arrangement.Center,
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            for (i in 1..5) {
                                IconButton(onClick = { rating = i }) {
                                    Icon(
                                        painter = painterResource(
                                            id = if (i <= rating) R.drawable.sao else R.drawable.saorong
                                        ),
                                        contentDescription = "Sao $i",
                                        tint = Color(0xFFFFC107),
                                        modifier = Modifier.size(40.dp)
                                    )
                                }
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // L·ªúI KHEN
                    Text(
                        text = "G·ª≠i l·ªùi khen c·ªßa b·∫°n",
                        fontWeight = FontWeight.Medium,
                        fontSize = 16.sp,
                        modifier = Modifier.padding(bottom = 8.dp)
                    )

                    // H√†ng ch·ª©a c√°c ‚Äúchip‚Äù l·ªùi khen
                    FlowRow(modifier = Modifier.fillMaxWidth()) {
                        compliments.forEach { compliment ->
                            val isSelected = compliment in selectedCompliments
                            Surface(
                                shape = RoundedCornerShape(50),
                                color = if (isSelected) Color(0xFF0081F1) else Color(0xFFF0F0F0),
                                modifier = Modifier
                                    .padding(horizontal = 4.dp, vertical = 4.dp)
                                    .clickable {
                                        selectedCompliments =
                                            if (isSelected) selectedCompliments - compliment
                                            else selectedCompliments + compliment
                                    }
                            ) {
                                Text(
                                    text = compliment,
                                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
                                    color = if (isSelected) Color.White else Color.Black,
                                    fontSize = 14.sp
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // N√öT G·ª¨I ƒêI
                    Button(
                        onClick = { /* TODO: G·ª≠i d·ªØ li·ªáu ƒë√°nh gi√° */ },
                        colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF0081F1)),
                        shape = RoundedCornerShape(12.dp),
                        modifier = Modifier
                            .fillMaxWidth(0.6f)
                            .padding(top = 40.dp)
                    ) {
                        Text(
                            text = "G·ª≠i ƒëi",
                            color = Color.White,
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }
                }
            }
        }
    }
}
