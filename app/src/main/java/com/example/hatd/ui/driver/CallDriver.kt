package com.example.hatd.ui.driver.CallDriver

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.hatd.R

@Composable
fun CallDriverScreen(onBackClick: () -> Unit = {}) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        // üîπ N√∫t X ·ªü g√≥c tr√°i tr√™n
        Image(
            painter = painterResource(id = R.drawable.x),
            contentDescription = "Close",
            modifier = Modifier
                .align(Alignment.TopStart)
                .padding(top = 60.dp, start = 20.dp)
                .size(60.dp)
                .clickable { onBackClick() } // cho ph√©p nh·∫•n ƒë·ªÉ quay l·∫°i
        )

        // üîπ ·∫¢nh driver + ch·ªØ Driver + tr·∫°ng th√°i cu·ªôc g·ªçi
        Column(
            modifier = Modifier
                .align(Alignment.Center)
                .offset(y = (-170).dp) // k√©o c·ª•m n√†y cao l√™n
                .padding(horizontal = 20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // ·∫¢nh driver
            Image(
                painter = painterResource(id = R.drawable.anhuser),
                contentDescription = "Driver Image",
                modifier = Modifier
                    .size(260.dp) // ph√≥ng to ·∫£nh
                    .clip(CircleShape),
                contentScale = ContentScale.Crop
            )

            Spacer(modifier = Modifier.height(10.dp))

            // T√™n t√†i x·∫ø
            Text(
                text = "Driver",
                fontSize = 30.sp,
                fontWeight = FontWeight.Bold,
                color = Color.Black,
                textAlign = TextAlign.Center
            )

            // Tr·∫°ng th√°i g·ªçi
            Text(
                text = "ƒêang g·ªçi...",
                fontSize = 20.sp,
                color = Color.Gray,
                textAlign = TextAlign.Center
            )
        }

        // üîπ 3 n√∫t ch·ª©c nƒÉng: loa - mic - k·∫øt th√∫c
        Surface(
            shape = RoundedCornerShape(50),
            color = Color(0xFFD5E8F8),
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 60.dp)
                .height(75.dp)
                .width(300.dp) // üî∏ tƒÉng chi·ªÅu ngang ƒë·ªÉ 3 n√∫t d√£n xa nhau h∆°n
        ) {
            Row(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp), // üî∏ th√™m kho·∫£ng c√°ch hai b√™n
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // üî∏ N√∫t loa
                Image(
                    painter = painterResource(id = R.drawable.loa),
                    contentDescription = "Speaker",
                    modifier = Modifier
                        .size(60.dp)
                        .clickable { /* TODO: b·∫≠t loa */ }
                )

                // üî∏ N√∫t mic
                Image(
                    painter = painterResource(id = R.drawable.mic),
                    contentDescription = "Mute",
                    modifier = Modifier
                        .size(60.dp)
                        .clickable { /* TODO: t·∫Øt mic */ }
                )

                // üî∏ N√∫t k·∫øt th√∫c cu·ªôc g·ªçi
                Image(
                    painter = painterResource(id = R.drawable.ketthuc),
                    contentDescription = "End call",
                    modifier = Modifier
                        .size(60.dp)
                        .clip(CircleShape)
                        .clickable { /* TODO: k·∫øt th√∫c */ }
                )
            }
        }
    }
}
